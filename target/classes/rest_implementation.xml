<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:ws="http://www.mulesoft.org/schema/mule/ws" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd">
    <ws:consumer-config name="Web_Service_Consumer" wsdlLocation="aclwspolchgsnet.wsdl" service="aclwspolchgsnet" port="aclwspolchgsnetSoap" serviceAddress="http://localhost:8081/aclwspolchgsnet/aclwspolchgsnetSoap" doc:name="Web Service Consumer"/>
    <sub-flow name="rest_subflow">
        <dw:transform-message doc:name="parsing to xml input for web service">
            <dw:set-payload><![CDATA[%dw 1.0
%input payload application/json
%output application/xml 
---
{
soapenv:
	WSACT: {
		WSACTRequest: {
			SEARCH_TYP: inboundProperties['http.query.params'].search_typ,
			SEARCH_NO: inboundProperties['http.query.params'].search_no,
			AGENT: inboundProperties['http.query.params'].agent,
			LST_RECORD: inboundProperties['http.query.params'].lst_record
		}
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        <ws:consumer config-ref="Web_Service_Consumer" operation="WSACT" doc:name="Web Service Consumer : consuming soap service"/>
        <logger message="#[payload]" level="INFO" doc:name="Logger123"/>
        <dw:transform-message doc:name="xml to json and fiels transformation">
            <dw:set-payload><![CDATA[%dw 1.0
%input payload application/xml 
%output application/json skipNullOn="everywhere"
%function skipEmpty(value) 
(value) when value != "" otherwise null 

---
{
	phone: payload.WSACTResponse.WSACTResult.PHONE_1 ++ "-" ++ payload.WSACTResponse.WSACTResult.PHONE_2 ++ "-" ++ payload.WSACTResponse.WSACTResult.PHONE_3,
	fax:payload.WSACTResponse.WSACTResult.FAX_1 ++ "-" ++ payload.WSACTResponse.WSACTResult.FAX_2 ++ "-" ++ payload.WSACTResponse.WSACTResult.FAX_3 ,
	
	search_type: payload.WSACTResponse.WSACTResult.SEARCH_TYP,
	search_no: payload.WSACTResponse.WSACTResult.SEARCH_NO,
	agent_no: payload.WSACTResponse.WSACTResult.AGENT,
	result: payload.WSACTResponse.WSACTResult.WSRESULT,
	wsmessage: payload.WSACTResponse.WSACTResult.WSMESSAGE,
	contact_name: payload.WSACTResponse.WSACTResult.CONTACT_NM,
	account_number: payload.WSACTResponse.WSACTResult.ACCOUNT_NO,
	account_primary_account_name: payload.WSACTResponse.WSACTResult.ACCT_NAME1,
	account_address: payload.WSACTResponse.WSACTResult.ACCT_ADDR1,
	account_state: payload.WSACTResponse.WSACTResult.ACCT_ST,
	account_zip: payload.WSACTResponse.WSACTResult.ACCT_ZIP,
	service_center: true as :boolean,
	lineItems:  payload.WSACTResponse.WSACTResult.*LineItems   map (item, index) -> {
	     pol_stat: skipEmpty(item.POL_STAT)    ,
		type_code: skipEmpty(item.TYPE_CODE),
		(effective_date: item.EFF_DATE as :date {format: "yyyyMMdd"} as :string {format: "yyyy-MM-dd"}) when item !={} and 
		item.EFF_DATE !=null and item.EFF_DATE !=0 and  (item.EFF_DATE matches /(\d{8})/) ,
		(expiry_date: item.EXP_DATE as :date {format: "yyyyMMdd"} as :string {format: "yyyy-MM-dd"}) when item !={} and 
		item.EXP_DATE !=null and item.EXP_DATE !=0 and  (item.EXP_DATE matches /(\d{8})/) ,
		coordination-of_benifits:skipEmpty(item.COB),
		policy_status:skipEmpty(item.POL_STATUS) ,
		policy_agent:skipEmpty(item.POL_AGENT),
		policy_number:skipEmpty(item.POLNO)  ,
		policy_plan:skipEmpty(item.P_PLN) ,
		policy_type:skipEmpty(item.POL_TYPE)  ,
		bill_description:skipEmpty(item.BILL_DESC),
		name: skipEmpty(item.NAME1) ,
		address1:skipEmpty(item.ADDR1)  ,
		city:skipEmpty(item.CITY)  ,
		state: skipEmpty(item.STATE_2A),
		zipcode:skipEmpty(item.ZIPCODE)  ,
		rate_state:skipEmpty(item.RATE_ST)  ,
		change_yn: true as :boolean ,
		term: skipEmpty(item.TERM) ,
		bus_type:skipEmpty(item.BUS_TYPE)
	} ,
	statusmessages: 
		StatusMessage: payload.WSACTResponse.WSACTResult.StatusMessages.StatusMessage
}

]]></dw:set-payload>
        </dw:transform-message>
        <logger message="#[payload]" level="INFO" doc:name="Logger : Displaying payload"/>
    </sub-flow>
    <flow name="rest_implementation">
        <flow-ref name="rest_subflow" doc:name="Flow Reference"/>
        <exception-strategy ref="ChoiceExceptionStrategy" doc:name="Reference Exception Strategy"/>
    </flow>
</mule>
